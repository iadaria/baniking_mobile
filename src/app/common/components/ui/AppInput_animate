import React, { useEffect, useState } from 'react';
import { StyleSheet, Text, TextInput, View, Animated } from 'react-native';
import { Block } from './Block';
import {
  widthPercentageToDP as wp,
  heightPercentageToDP as hp,
} from 'react-native-responsive-screen';
import { IInputStyleProps, IUiInput } from '~/src/app/models/input';
import { colors, fonts, sizes } from '~/src/app/common/constants';

export function AppInput(props: IUiInput) {
  // const [toggleSecure, setToggleSecure] = useState(false);
  const [isFocused, setIsFocused] = useState<boolean>(false);
  const [animatedIsFocused] = useState(new Animated.Value(0));

  useEffect(() => {
    Animated.timing(animatedIsFocused, {
      toValue: isFocused ? 1 : 0,
      duration: 200,
      useNativeDriver: false,
    }).start();
  }, []);

  function handleFocus() {
    setIsFocused(true);
  }
  function handleBlur() {
    setIsFocused(false);
  }

  const {
    // outlined,
    email,
    phone,
    number,
    label,
    // secure,
    error,
    // colors
    style,
    ...otherProps
  } = props;

  // const isSecure = toggleSecure ? false : secure;

  const inputStyles = [
    styles.input,
    error && { borderColor: colors.accent },
    style,
  ];

  const labelWrapperStyle = [
    styles.labelWrapper,
    {
      top: !isFocused ? hp(1.4) : -hp(1.4),
      left: !isFocused ? wp(4) : wp(sizes.input.paddingHorizontal),
      zIndex: !isFocused ? null : 2,
    },
  ];

  const labelStyle = [
    styles.label,
    {
      fontSize: !isFocused ? wp(sizes.font.base) : 14,
      color: !isFocused ? '#aaa' : '#000',
    },
  ];

  // const inputPaperStyles = [main && { selectionColor: colors.primary }, style];

  const inputType = email
    ? 'email-address'
    : number
    ? 'numeric'
    : phone
    ? 'phone-pad'
    : 'default';

  return (
    <Block margin={[sizes.input.between, 0, 0]}>
      {/* {renderLabel()} */}
      <View style={labelWrapperStyle}>
        <Text style={labelStyle}>{label}</Text>
      </View>
      <TextInput
        style={inputStyles}
        // defaultValue="Сергеев"
        // secureTextEntry={isSecure}
        autoCompleteType="off"
        autoCapitalize="none"
        autoCorrect={false}
        keyboardType={inputType}
        onFocus={handleFocus}
        onBlur={handleBlur}
        {...otherProps}
      />
      {/* {renderToggle()} */}
      {/* {renderRight()} */}
    </Block>
  );
}

const styles = StyleSheet.create<IInputStyleProps>({
  input: {
    borderWidth: StyleSheet.hairlineWidth,
    borderColor: colors.black,
    borderRadius: sizes.radius,
    fontSize: wp(sizes.font.base),
    color: colors.black,
    height: hp(sizes.input.hight),
    paddingHorizontal: wp(sizes.input.paddingHorizontal),
  },
  toggle: {
    position: 'absolute',
    alignItems: 'flex-end',
    width: sizes.offset.base * 2,
    height: sizes.offset.base * 2,
    top: sizes.offset.base,
    right: 0,
  },
  labelWrapper: {
    position: 'absolute',
    left: 0,
    alignSelf: 'flex-start',
    backgroundColor: colors.white,
    borderWidth: 0.5,
    borderColor: 'red',
    paddingHorizontal: wp(1),
  },
  label: {},
});

/*
function renderLabel(): JSX.Element {
  const { label, error } = props;

  return (
    <Block>
      {label ? (
        <AppText gray2={!error} accent={error}>
          {label}
        </AppText>
      ) : null}
    </Block>
  );
}

function renderToggle(): JSX.Element | null {
  const { secure, rightLabel } = props;

  if (!secure) {
    return null;
  }

return (
    <AppButton
      style={styles.toggle}
      onPress={() => setToggleSecure(!toggleSecure)}>
      {rightLabel ? (
        rightLabel
      ) : (
        <Icon
          color={colors.gray}
          size={sizes.font * 1.35}
          name={!toggleSecure ? 'md-eye' : 'md-eye-off'}
        />
      )}
    </AppButton>
  );
}

function renderRight(): JSX.Element | null {
  const { rightLabel, rightStyle, onRightPress } = props;

  if (!rightLabel) {
    return null;
  }

  return (
    <AppButton
      style={[styles.toggle, rightStyle]}
      onPress={() => onRightPress && onRightPress()}>
      {rightLabel}
    </AppButton>
  );
} */
